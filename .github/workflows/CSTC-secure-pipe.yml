name: SonarQube Scan

on:
  push:
    branches:
      - main

jobs:
#  sonarScans:
#    name: SonarScan Job
#    runs-on: self-hosted
#    steps:
#      - name: Adding GitHub to known_hosts
#        run: |
#          mkdir -p ~/.ssh
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#        
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          ssh-key: ${{ secrets.CSTX_SSH_KEY }}
#          repository: ${{ github.repository }}
#          submodules: true
#      - name: Run SonarQube Scan
#        uses: SonarSource/sonarqube-scan-action@v4.1.0
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
#        with:
#          
#          projectBaseDir: .
#          args: >
#            -Dsonar.projectKey=${{ secrets.SONAR_PROJ_CODE }}
#            -Dsonar.sources=app,config,resources,routes,tests
#            -Dsonar.exclusions=node_modules/**,public/**,storage/**,vendor/**
#      - name: SonarQube Quality Gate
#        id: sonar_quality_gate
#        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
#        env:
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      - name: Check Quality Gate Status
#        run: |
#          curl -u ${{ secrets.SONAR_TOKEN }}: ${{ secrets.SONAR_URL}}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJ_CODE }} > result.json
#          quality_gate_status=$(jq -r .projectStatus.status result.json)
#          echo "Quality gate status: $quality_gate_status"
#          if [[ "$quality_gate_status" != "OK" ]]; then
#              echo "Failed quality check!"
#              exit 1
#          fi 
#  Build-and-Push:
#    needs: sonarScans
#    name: Build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Adding GitHub to known_hosts
#        run: |
#          mkdir -p ~/.ssh
#          ssh-keyscan github.com >> ~/.ssh/known_hosts
#        
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          ssh-key: ${{ secrets.CSTX_SSH_KEY }}
#          repository: ${{ github.repository }}
#          submodules: true
#      - name: Build and Push Docker Image
#        run: |
#         echo "Logging in to Docker Hub..."
#         docker login -u ${{ secrets.CSTC_DOCKER_LOGIN }} --password-stdin <<EOF
#         ${{ secrets.CSTC_DOCKER_PASSWORD }}
#         EOF
#         docker build -t docker.io/cstciiiichabir/cstc_akounting:latest .
#         docker push docker.io/cstciiiichabir/cstc_akounting:latest 
  Deploy-to-Kubernetes:
#      needs: Build-and-Push
      name: Deploy new image to kubernetes
      runs-on: self-hosted
      steps:
      - name: Adding GitHub to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.CSTX_SSH_KEY }}
          repository: ${{ github.repository }}
          submodules: true 
#      - name: install kubectl
#        run: | 
#          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#          chmod +x kubectl
#          mkdir -p ~/.local/bin
#          export PATH=$PATH:~/.local/bin
#          mv ./kubectl ~/.local/bin/kubectl
#          kubectl version --client
      - name: configuring Kub8s
        run: |
          mkdir -p ~/.kube
          mkdir -p ~/.minikube/cstc/
          echo "${{ secrets.CSTC_KUBE_CONFIG_B64 }}" | base64 --decode > ~/.kube/config
          echo "${{ secrets.CSTC_CA_CERT_B64 }}" | base64 --decode > ~/.minikube/ca.crt
          echo "${{ secrets.CSTC_CLIENT_CERT_B64 }}" | base64 --decode > ~/.minikube/cstc/client.crt 
          echo "${{ secrets.CSTC_CLIENT_KEY_B64 }}" |  base64 --decode > ~/.minikube/cstc/client.crt
      - name: Apply Kubernetes deployment
        run: |
          kubectl apply -f kubernetes/cstc-sealed-secrets.yaml
          kubectl apply -f kubernetes/cstc-config-map.yaml
          kubectl apply -f kubernetes/cstc-app-depl.yaml
      - name: clean up
        run: |
            ~/rm -rf .minikube
